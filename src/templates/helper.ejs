// 自動生成されたヘルパー - <%= model.model %>
import { Prisma, <%= model.model %> } from '@prisma/client';
// PrismaClientSingletonの共通モジュールをインポート
import { prisma } from '../../src/prisma-client';
import { buildNestedInclude, mergeIncludes } from '../../src/include-utils';

export class <%= model.model %>QueryBuilder<Include extends Prisma.<%= model.model %>Include = object> {
  private includes: Include = {} as Include;
  private conditions: Prisma.<%= model.model %>WhereInput = {};
  private order: Prisma.<%= model.model %>OrderByWithRelationInput[] = [];
  private enableSoftDelete: boolean = false;

  // モデルごとの全リレーション名
  static allRelations = [<% model.relations.forEach((relation, index) => { %>'<%= relation %>'<%= index < model.relations.length - 1 ? ', ' : '' %><% }); %>];
  static relationTree = {<% const entries = Object.entries(model.relationMap); entries.forEach(([k,v], index) => { %>'<%= k %>': '<%= v %>'<%= index < entries.length - 1 ? ', ' : '' %><% }); %>};

  private getIncludeWithDefaults(): Prisma.<%= model.model %>Include {
    if (Object.keys(this.includes).length === 0) {
      const all: Record<keyof Prisma.<%= model.model %>Include, true> = {} as Record<keyof Prisma.<%= model.model %>Include, true>;
      (<%= model.model %>QueryBuilder.allRelations as (keyof Prisma.<%= model.model %>Include)[]).forEach((rel) => {
        all[rel] = true;
      });
      return all as Prisma.<%= model.model %>Include;
    }
    return this.includes as Prisma.<%= model.model %>Include;
  }

  /**
   * リレーションを動的に指定する（型安全）
   * @param relations Prisma.<%= model.model %>Includeのキーまたは配列
   */
  with<K extends keyof Prisma.<%= model.model %>Include>(relations: K | K[]): <%= model.model %>QueryBuilder<Include & { [P in K]: true }>;
  with(path: string): <%= model.model %>QueryBuilder<Include>;
  with<K extends keyof Prisma.<%= model.model %>Include>(relations: K | K[] | string): <%= model.model %>QueryBuilder<Include> {
    if (typeof relations === 'string') {
      if (relations.includes('.')) {
        const nested = buildNestedInclude('<%= model.model %>', relations, <%= model.model %>QueryBuilder.relationTree);
        this.includes = mergeIncludes(this.includes as Record<string, unknown>, nested) as Include;
        return this as unknown as <%= model.model %>QueryBuilder<Include>;
      }
      const arr: K[] = [relations as K];
      const includes: Partial<Record<K, true>> = {};
      for (const rel of arr) {
        includes[rel] = true;
      }
      this.includes = { ...this.includes, ...includes } as Include & Record<K, true>;
      return this as unknown as <%= model.model %>QueryBuilder<Include & { [P in K]: true }>;
    }
    const arr = Array.isArray(relations) ? relations : [relations];
    const includes: Partial<Record<K, true>> = {};
    for (const rel of arr) {
      includes[rel] = true;
    }
    this.includes = { ...this.includes, ...includes } as Include & Record<K, true>;
    return this as unknown as <%= model.model %>QueryBuilder<Include & { [P in K]: true }>;
  }

  orderBy(column: keyof Prisma.<%= model.model %>OrderByWithRelationInput, direction: 'asc' | 'desc'): this {
    this.order.push({ [column]: direction } as Prisma.<%= model.model %>OrderByWithRelationInput);
    return this;
  }

  setEnableSoftDelete(): this {
    this.enableSoftDelete = true;
    return this;
  }

  async first(): Promise<Prisma.<%= model.model %>GetPayload<{ include: Prisma.<%= model.model %>Include }> | null> {
    const where: Prisma.<%= model.model %>WhereInput = { ...this.conditions };
    if (this.enableSoftDelete) {
      Object.assign(where, { deletedAt: null });
    }
    return prisma.<%= model.model.toLowerCase() %>.findFirst({
      where,
      include: this.getIncludeWithDefaults(),
      orderBy: this.order.length > 0 ? this.order : undefined,
    });
  }

  async get(): Promise<Prisma.<%= model.model %>GetPayload<{ include: Prisma.<%= model.model %>Include }>[]> {
    const where: Prisma.<%= model.model %>WhereInput = { ...this.conditions };
    if (this.enableSoftDelete) {
      Object.assign(where, { deletedAt: null });
    }
    return prisma.<%= model.model.toLowerCase() %>.findMany({
      where,
      include: this.getIncludeWithDefaults(),
      orderBy: this.order.length > 0 ? this.order : undefined,
    });
  }

  async findById(id: number): Promise<Prisma.<%= model.model %>GetPayload<{ include: Prisma.<%= model.model %>Include }> | null> {
    const where: Prisma.<%= model.model %>WhereUniqueInput & { deletedAt?: null } = { id };
    if (this.enableSoftDelete) {
      where.deletedAt = null;
    }
    return prisma.<%= model.model.toLowerCase() %>.findUnique({
      where,
      include: this.getIncludeWithDefaults(),
    });
  }

  where(conditions: Prisma.<%= model.model %>WhereInput): <%= model.model %>QueryBuilder<Include> {
    this.conditions = conditions;
    return this;
  }

  async delete(id: number): Promise<<%= model.model %>> {
<% if (model.fields && model.fields.some(f => f.name === 'deletedAt')) { %>
    if (this.enableSoftDelete) {
      // 論理削除
      return prisma.<%= model.model.toLowerCase() %>.update({
        where: { id },
        data: { deletedAt: new Date() },
      });
    } else {
      // 物理削除
      return prisma.<%= model.model.toLowerCase() %>.delete({
        where: { id },
      });
    }
<% } else { %>
    // 物理削除
    return prisma.<%= model.model.toLowerCase() %>.delete({
      where: { id },
    });
<% } %>
  }
}

export const <%= model.model %>Helper = {
  modelName: '<%= model.model %>',
  relations: [<% model.relations.forEach((relation, index) => { %>'<%= relation %>'<%= index < model.relations.length - 1 ? ', ' : '' %><% }); %>],
  relationTree: {<% const entries = Object.entries(model.relationMap); entries.forEach(([k,v], index) => { %>'<%= k %>': '<%= v %>'<%= index < entries.length - 1 ? ', ' : '' %><% }); %>},
  enableSoftDelete: false,

  async create(data: Prisma.<%= model.model %>CreateInput): Promise<<%= model.model %>> {
    return prisma.<%= model.model.toLowerCase() %>.create({ data });
  },

  async update(id: number, data: Prisma.<%= model.model %>UpdateInput): Promise<<%= model.model %>> {
    return prisma.<%= model.model.toLowerCase() %>.update({
      where: { id },
      data,
    });
  },

  async delete(id: number): Promise<<%= model.model %>> {
<% if (model.fields && model.fields.some(f => f.name === 'deletedAt')) { %>
    if (this.enableSoftDelete) {
      // 論理削除
      return prisma.<%= model.model.toLowerCase() %>.update({
        where: { id },
        data: { deletedAt: new Date() },
      });
    } else {
      // 物理削除
      return prisma.<%= model.model.toLowerCase() %>.delete({
        where: { id },
      });
    }
<% } else { %>
    // 物理削除
    return prisma.<%= model.model.toLowerCase() %>.delete({
      where: { id },
    });
<% } %>
  },

  async findById(id: number): Promise<Prisma.<%= model.model %>GetPayload<{ include: { <% model.relations.forEach((relation, index) => { %><%= relation %>: true<%= index < model.relations.length - 1 ? ', ' : '' %><% }); %> } }> | null> {
    return prisma.<%= model.model.toLowerCase() %>.findUnique({
      where: { id },
      include: {<% model.relations.forEach((relation, index) => { %>
        <%= relation %>: true<%= index < model.relations.length - 1 ? ',' : '' %>
      <% }); %>},
    });
  },

  where(conditions: Prisma.<%= model.model %>WhereInput): <%= model.model %>QueryBuilder {
    return new <%= model.model %>QueryBuilder().where(conditions);
  },
  with(relations: keyof Prisma.<%= model.model %>Include | (keyof Prisma.<%= model.model %>Include)[] | string): <%= model.model %>QueryBuilder<object> {
    return new <%= model.model %>QueryBuilder().with(relations as unknown as never);
  },
};
