// 自動生成されたヘルパー - <%= model.model %>
import { PrismaClient } from '@prisma/client';
import { Prisma } from '@prisma/client';

const prisma = new PrismaClient();

export class <%= model.model %>QueryBuilder {
  private includes: Record<string, boolean> = {};
  private conditions: Prisma.<%= model.model %>WhereInput = {};

  constructor() {
    this.includes = {<% model.relations.forEach((relation, index) => { %>
      <%= relation %>: true,<% }); %>
    };
  }

  async first(): Promise<Prisma.<%= model.model %>GetPayload<{
    include: {<% model.relations.forEach((relation, index) => { %> <%= relation %>: true<% if (index < model.relations.length - 1) { %>,<% } %><% }); %> };
  }> | null> {
    return prisma.<%= model.model.toLowerCase() %>.findFirst({
      where: this.conditions,
      include: {<% model.relations.forEach((relation, index) => { %>
        <%= relation %>: true,<% }); %>
      },
    });
  }

  async get(): Promise<
    Prisma.<%= model.model %>GetPayload<{
      include: {<% model.relations.forEach((relation, index) => { %> <%= relation %>: true<% if (index < model.relations.length - 1) { %>,<% } %><% }); %> };
    }>[]
  > {
    return prisma.<%= model.model.toLowerCase() %>.findMany({
      where: this.conditions,
      include: {<% model.relations.forEach((relation, index) => { %>
        <%= relation %>: true,<% }); %>
      },
    });
  }

  async findById(id: number): Promise<Prisma.<%= model.model %>GetPayload<{
    include: {<% model.relations.forEach((relation, index) => { %> <%= relation %>: true<% if (index < model.relations.length - 1) { %>,<% } %><% }); %> };
  }> | null> {
    return prisma.<%= model.model.toLowerCase() %>.findUnique({
      where: { id },
      include: {<% model.relations.forEach((relation, index) => { %>
        <%= relation %>: true,<% }); %>
      },
    });
  }

  where(conditions: Prisma.<%= model.model %>WhereInput): <%= model.model %>QueryBuilder {
    this.conditions = conditions;
    return this;
  }
}

export const <%= model.model %>Helper = {
  modelName: '<%= model.model %>',
  relations: [<% model.relations.forEach((relation, index) => { %>'<%= relation %>'<%= index < model.relations.length - 1 ? ', ' : '' %><% }); %>],

  async findById(id: number): Promise<Prisma.<%= model.model %>GetPayload<{
    include: {<% model.relations.forEach((relation, index) => { %> <%= relation %>: true<% if (index < model.relations.length - 1) { %>,<% } %><% }); %> };
  }> | null> {
    return prisma.<%= model.model.toLowerCase() %>.findUnique({
      where: { id },
      include: {<% model.relations.forEach((relation, index) => { %>
        <%= relation %>: true,<% }); %>
      },
    });
  },

  where(conditions: Prisma.<%= model.model %>WhereInput): <%= model.model %>QueryBuilder {
    return new <%= model.model %>QueryBuilder().where(conditions);
  },
};
