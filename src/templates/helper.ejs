// 自動生成されたヘルパー - <%= model.model %>
import { Prisma, <%= model.model %> } from '@prisma/client';
import type { IncludesFromArray } from '../../src/include-types';
// PrismaClientSingletonの共通モジュールをインポート
import { prisma } from '../../src/prisma-client';

export class <%= model.model %>QueryBuilder<Include extends Prisma.<%= model.model %>Include = object> {
  private includes: Include = {} as Include;
  private conditions: Prisma.<%= model.model %>WhereInput = {};
  private order: Prisma.<%= model.model %>OrderByWithRelationInput[] = [];
  private enableSoftDelete: boolean = false;

  // モデルごとの全リレーション名
  static allRelations = [<% model.relations.forEach((relation, index) => { %>'<%= relation %>'<%= index < model.relations.length - 1 ? ', ' : '' %><% }); %>];

  private getIncludeWithDefaults(): Prisma.<%= model.model %>Include {
    if (Object.keys(this.includes).length === 0) {
      const all: Record<keyof Prisma.<%= model.model %>Include, true> = {} as Record<keyof Prisma.<%= model.model %>Include, true>;
      (<%= model.model %>QueryBuilder.allRelations as (keyof Prisma.<%= model.model %>Include)[]).forEach((rel) => {
        all[rel] = true;
      });
      return all as Prisma.<%= model.model %>Include;
    }
    return this.includes as Prisma.<%= model.model %>Include;
  }

  /**
   * リレーションを動的に指定する（型安全）
   * @param relations Prisma.<%= model.model %>Includeのキーまたは配列
   */
  with<Paths extends string>(relations: Paths | Paths[]): <%= model.model %>QueryBuilder<Include & IncludesFromArray<Paths[]>> {
    const add = (path: string): void => {
      const parts = path.split('.');
      let target = this.includes as unknown as Record<string, unknown>;
      for (const [index, part] of parts.entries()) {
        if (index === parts.length - 1) {
          target[part] = true;
        } else {
          if (target[part] === undefined || target[part] === true) {
            target[part] = { include: {} };
          }
          target = (target[part] as { include: Record<string, unknown> }).include;
        }
      }
    };
    if (Array.isArray(relations)) {
      for (const rel of relations) {
        add(rel);
      }
    } else {
      add(relations);
    }
    return this as unknown as <%= model.model %>QueryBuilder<Include & IncludesFromArray<Paths[]>>;
  }

  orderBy(column: keyof Prisma.<%= model.model %>OrderByWithRelationInput, direction: 'asc' | 'desc'): this {
    this.order.push({ [column]: direction } as Prisma.<%= model.model %>OrderByWithRelationInput);
    return this;
  }

  setEnableSoftDelete(): this {
    this.enableSoftDelete = true;
    return this;
  }

  async first(): Promise<Prisma.<%= model.model %>GetPayload<{ include: Include }> | null> {
    const where: Prisma.<%= model.model %>WhereInput = { ...this.conditions };
    if (this.enableSoftDelete) {
      Object.assign(where, { deletedAt: null });
    }
    return prisma.<%= model.model.toLowerCase() %>.findFirst({
      where,
      include: this.getIncludeWithDefaults(),
      orderBy: this.order.length > 0 ? this.order : undefined,
    });
  }

  async get(): Promise<Prisma.<%= model.model %>GetPayload<{ include: Include }>[]> {
    const where: Prisma.<%= model.model %>WhereInput = { ...this.conditions };
    if (this.enableSoftDelete) {
      Object.assign(where, { deletedAt: null });
    }
    return prisma.<%= model.model.toLowerCase() %>.findMany({
      where,
      include: this.getIncludeWithDefaults(),
      orderBy: this.order.length > 0 ? this.order : undefined,
    });
  }

  async findById(id: number): Promise<Prisma.<%= model.model %>GetPayload<{ include: Include }> | null> {
    const where: Prisma.<%= model.model %>WhereUniqueInput & { deletedAt?: null } = { id };
    if (this.enableSoftDelete) {
      where.deletedAt = null;
    }
    return prisma.<%= model.model.toLowerCase() %>.findUnique({
      where,
      include: this.getIncludeWithDefaults(),
    });
  }

  where(conditions: Prisma.<%= model.model %>WhereInput): <%= model.model %>QueryBuilder<Include> {
    this.conditions = conditions;
    return this;
  }

  async delete(id: number): Promise<<%= model.model %>> {
<% if (model.fields && model.fields.some(f => f.name === 'deletedAt')) { %>
    if (this.enableSoftDelete) {
      // 論理削除
      return prisma.<%= model.model.toLowerCase() %>.update({
        where: { id },
        data: { deletedAt: new Date() },
      });
    } else {
      // 物理削除
      return prisma.<%= model.model.toLowerCase() %>.delete({
        where: { id },
      });
    }
<% } else { %>
    // 物理削除
    return prisma.<%= model.model.toLowerCase() %>.delete({
      where: { id },
    });
<% } %>
  }
}

export const <%= model.model %>Helper = {
  modelName: '<%= model.model %>',
  relations: [<% model.relations.forEach((relation, index) => { %>'<%= relation %>'<%= index < model.relations.length - 1 ? ', ' : '' %><% }); %>],
  enableSoftDelete: false,

  async create(data: Prisma.<%= model.model %>CreateInput): Promise<<%= model.model %>> {
    return prisma.<%= model.model.toLowerCase() %>.create({ data });
  },

  async update(id: number, data: Prisma.<%= model.model %>UpdateInput): Promise<<%= model.model %>> {
    return prisma.<%= model.model.toLowerCase() %>.update({
      where: { id },
      data,
    });
  },

  async delete(id: number): Promise<<%= model.model %>> {
<% if (model.fields && model.fields.some(f => f.name === 'deletedAt')) { %>
    if (this.enableSoftDelete) {
      // 論理削除
      return prisma.<%= model.model.toLowerCase() %>.update({
        where: { id },
        data: { deletedAt: new Date() },
      });
    } else {
      // 物理削除
      return prisma.<%= model.model.toLowerCase() %>.delete({
        where: { id },
      });
    }
<% } else { %>
    // 物理削除
    return prisma.<%= model.model.toLowerCase() %>.delete({
      where: { id },
    });
<% } %>
  },

  async findById(id: number): Promise<Prisma.<%= model.model %>GetPayload<{ include: { <% model.relations.forEach((relation, index) => { %><%= relation %>: true<%= index < model.relations.length - 1 ? ', ' : '' %><% }); %> } }> | null> {
    return prisma.<%= model.model.toLowerCase() %>.findUnique({
      where: { id },
      include: {<% model.relations.forEach((relation, index) => { %>
        <%= relation %>: true<%= index < model.relations.length - 1 ? ',' : '' %>
      <% }); %>},
    });
  },

  where(conditions: Prisma.<%= model.model %>WhereInput): <%= model.model %>QueryBuilder {
    return new <%= model.model %>QueryBuilder().where(conditions);
  },
  with<Paths extends string>(relations: Paths | Paths[]): <%= model.model %>QueryBuilder<IncludesFromArray<Paths[]>> {
    return new <%= model.model %>QueryBuilder<IncludesFromArray<Paths[]>>().with(relations);
  },
};
