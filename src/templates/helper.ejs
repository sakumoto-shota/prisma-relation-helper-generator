// 自動生成されたヘルパー - <%= model.model %>
import { Prisma } from '@prisma/client';
// PrismaClientSingletonの共通モジュールをインポート
import { prisma } from '../../src/prisma-client';

/**
 * リレーションのincludeオブジェクトを生成するヘルパー関数
 * @returns リレーションを含むincludeオブジェクト
 */
function generateIncludeObject(): { <% model.relations.forEach((relation, index) => { %><%= relation %>: true<% if (index < model.relations.length - 1) { %>; <% } %><% }); %> } {
  return {<% model.relations.forEach((relation, index) => { %>
    <%= relation %>: true,<% }); %>
  };
}

export class <%= model.model %>QueryBuilder {
  private includes: { <% model.relations.forEach((relation, index) => { %><%= relation %>: true<% if (index < model.relations.length - 1) { %>; <% } %><% }); %> };
  private conditions: Prisma.<%= model.model %>WhereInput = {};

  constructor() {
    this.includes = generateIncludeObject();
  }

  async first(): Promise<Prisma.<%= model.model %>GetPayload<{
    include: { <% model.relations.forEach((relation, index) => { %><%= relation %>: true<% if (index < model.relations.length - 1) { %>; <% } %><% }); %> };
  }> | null> {
    return prisma.<%= model.model.toLowerCase() %>.findFirst({
      where: this.conditions,
      include: this.includes,
    });
  }

  async get(): Promise<
    Prisma.<%= model.model %>GetPayload<{
      include: { <% model.relations.forEach((relation, index) => { %><%= relation %>: true<% if (index < model.relations.length - 1) { %>; <% } %><% }); %> };
    }>[]
  > {
    return prisma.<%= model.model.toLowerCase() %>.findMany({
      where: this.conditions,
      include: this.includes,
    });
  }

  async findById(id: number): Promise<Prisma.<%= model.model %>GetPayload<{
    include: { <% model.relations.forEach((relation, index) => { %><%= relation %>: true<% if (index < model.relations.length - 1) { %>; <% } %><% }); %> };
  }> | null> {
    return prisma.<%= model.model.toLowerCase() %>.findUnique({
      where: { id },
      include: this.includes,
    });
  }

  where(conditions: Prisma.<%= model.model %>WhereInput): <%= model.model %>QueryBuilder {
    this.conditions = conditions;
    return this;
  }
}

export const <%= model.model %>Helper = {
  modelName: '<%= model.model %>',
  relations: [<% model.relations.forEach((relation, index) => { %>'<%= relation %>'<%= index < model.relations.length - 1 ? ', ' : '' %><% }); %>],

  async findById(id: number): Promise<Prisma.<%= model.model %>GetPayload<{
    include: { <% model.relations.forEach((relation, index) => { %><%= relation %>: true<% if (index < model.relations.length - 1) { %>; <% } %><% }); %> };
  }> | null> {
    return prisma.<%= model.model.toLowerCase() %>.findUnique({
      where: { id },
      include: generateIncludeObject(),
    });
  },

  where(conditions: Prisma.<%= model.model %>WhereInput): <%= model.model %>QueryBuilder {
    return new <%= model.model %>QueryBuilder().where(conditions);
  },
};
